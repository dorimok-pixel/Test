__version__ = (1, 0, 1)

# meta developer: @your_username
# description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏

import asyncio
import logging
import re
from datetime import datetime
from .. import loader, utils
from telethon.tl.functions.account import UpdateEmojiStatusRequest
from telethon.tl.types import EmojiStatus

logger = logging.getLogger(__name__)

@loader.tds
class AutoGifts(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    
    strings = {
        "name": "AutoGifts",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_collection": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n–ò—Å–ø–æ–ª—å–∑—É–π: .agsetcollection t.me/username/c/1",
        "loading": "üí´ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...",
        "collection_updated": "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {} –ø–æ–¥–∞—Ä–∫–æ–≤",
        "error_loading": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
    }
    
    strings_ru = {
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_collection": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n–ò—Å–ø–æ–ª—å–∑—É–π: .agsetcollection t.me/username/c/1",
        "loading": "üí´ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...",
        "collection_updated": "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {} –ø–æ–¥–∞—Ä–∫–æ–≤",
        "error_loading": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval_seconds",
                3600,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=120)
            ),
            loader.ConfigValue(
                "collection_link",
                "",
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤",
                validator=loader.validators.String()
            ),
        )
        self.is_running = False
        self.task = None
        self.current_index = 0
        self.nft_gifts = []
        self.me = None

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.me = await self._client.get_me()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.nft_gifts = self._db.get(__name__, "nft_gifts", [])
        
        if not self.me.premium:
            logger.warning("Telegram Premium required for NFT gifts")

    def _save_gifts(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(__name__, "nft_gifts", self.nft_gifts)

    async def _parse_collection_link(self, link: str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç username –∏ ID –∫–∞–Ω–∞–ª–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫: t.me/username/c/1 –∏–ª–∏ t.me/pupozermofko/c/2
            pattern = r"t\.me/([^/]+)/c/(\d+)"
            match = re.match(pattern, link)
            if match:
                username = match.group(1)
                channel_id = int(match.group(2))
                return username, channel_id
            return None, None
        except Exception as e:
            logger.error(f"Error parsing collection link: {e}")
            return None, None

    async def _load_collection_gifts(self, link: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ"""
        try:
            username, channel_id = await self._parse_collection_link(link)
            if not username or not channel_id:
                return None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏"

            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            entity = await self._client.get_entity(f"t.me/{username}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (–∫–æ–ª–ª–µ–∫—Ü–∏–∏)
            nft_gifts = []
            async for message in self._client.iter_messages(entity, limit=100):
                if message.media:
                    # –ò—â–µ–º document_id –≤ –º–µ–¥–∏–∞
                    if hasattr(message.media, 'document'):
                        doc_id = message.media.document.id
                        gift_title = message.text or f"NFT #{doc_id}"
                        
                        nft_gifts.append({
                            'document_id': doc_id,
                            'title': gift_title,
                            'message_id': message.id
                        })
                        logger.info(f"Found NFT in collection: {gift_title} (ID: {doc_id})")

            return nft_gifts, None

        except Exception as e:
            logger.error(f"Error loading collection: {e}")
            return None, str(e)

    async def _set_emoji_status(self, document_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å"""
        try:
            await self._client(UpdateEmojiStatusRequest(
                emoji_status=EmojiStatus(document_id=document_id)
            ))
            return True
        except Exception as e:
            logger.error(f"Error setting emoji status: {e}")
            return False

    async def _change_gift(self):
        """–°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        try:
            if not self.nft_gifts:
                logger.warning("No NFT gifts available")
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫
            nft_gift = self.nft_gifts[self.current_index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ emoji —Å—Ç–∞—Ç—É—Å
            success = await self._set_emoji_status(nft_gift['document_id'])
            
            if success:
                logger.info(f"Gift changed: {nft_gift['title']}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –ª—Å –æ —Å–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞
                try:
                    status_msg = (
                        f"üéÅ **NFT –ø–æ–¥–∞—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
                        f"üíé {nft_gift['title']}\n"
                        f"üÜî ID: {nft_gift['document_id']}\n"
                        f"üìä {self.current_index + 1}/{len(self.nft_gifts)}\n"
                        f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
                    )
                    await self._client.send_message(self.me.id, status_msg)
                except Exception as e:
                    logger.error(f"Error sending status message: {e}")
            else:
                logger.error(f"Failed to set gift: {nft_gift['title']}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–∞—Ä–∫—É
            self.current_index = (self.current_index + 1) % len(self.nft_gifts)
            
        except Exception as e:
            logger.error(f"Error changing gift: {e}")

    async def _gift_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        while self.is_running:
            try:
                await self._change_gift()
                await asyncio.sleep(self.config["interval_seconds"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in gift loop: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start automatic NFT gift changing",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def agstart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if self.is_running:
            await utils.answer(message, self.strings("already_running"))
            return
        
        if not self.me.premium:
            await utils.answer(message, self.strings("no_premium"))
            return
        
        if not self.config["collection_link"]:
            await utils.answer(message, self.strings("no_collection"))
            return
        
        if not self.nft_gifts:
            await utils.answer(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π .agreload")
            return
        
        self.is_running = True
        self.current_index = 0
        self.task = asyncio.create_task(self._gift_loop())
        
        # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        await self._change_gift()
        
        await utils.answer(message, self.strings("started").format(
            self.config["interval_seconds"], 
            len(self.nft_gifts)
        ))

    @loader.command(
        en_doc="Stop automatic NFT gift changing", 
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def agstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.is_running:
            await utils.answer(message, self.strings("already_stopped"))
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Set collection link",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é"
    )
    async def agsetcollection(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        args = utils.get_args(message)
        if not args:
            current_link = self.config["collection_link"]
            if current_link:
                await utils.answer(message, f"üìö –¢–µ–∫—É—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {current_link}")
            else:
                await utils.answer(message, self.strings("no_collection"))
            return
        
        link = args[0].strip()
        if not link.startswith("t.me/"):
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: t.me/username/c/1")
            return
        
        self.config["collection_link"] = link
        await utils.answer(message, f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {link}")

    @loader.command(
        en_doc="Reload collection gifts",
        ru_doc="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
    )
    async def agreload(self, message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        if not self.config["collection_link"]:
            await utils.answer(message, self.strings("no_collection"))
            return
        
        await utils.answer(message, self.strings("loading"))
        
        nft_gifts, error = await self._load_collection_gifts(self.config["collection_link"])
        
        if error:
            await utils.answer(message, self.strings("error_loading").format(error))
            return
        
        if not nft_gifts:
            await utils.answer(message, "‚ùå –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ NFT –ø–æ–¥–∞—Ä–∫–æ–≤")
            return
        
        self.nft_gifts = nft_gifts
        self.current_index = 0
        self._save_gifts()
        
        await utils.answer(message, self.strings("collection_updated").format(len(self.nft_gifts)))

    @loader.command(
        en_doc="Set change interval",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã"
    )
    async def aginterval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã"""
        args = utils.get_args(message)
        if not args:
            current_interval = self.config["interval_seconds"]
            await utils.answer(message, f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")
            return
        
        try:
            seconds = int(args[0])
            if seconds < 120:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 —Å–µ–∫—É–Ω–¥")
                return
                
            self.config["interval_seconds"] = seconds
            await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫—É–Ω–¥")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")

    @loader.command(
        en_doc="Show NFT gifts list",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def aglist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.nft_gifts:
            await utils.answer(message, "‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        
        gifts_text = "\n".join([
            f"{i+1}. {nft['title']} (ID: {nft['document_id']})"
            for i, nft in enumerate(self.nft_gifts)
        ])
        
        status = "–∞–∫—Ç–∏–≤–µ–Ω" if self.is_running else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await utils.answer(message, 
            f"üéÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {self.config['collection_link']}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìä –ü–æ–¥–∞—Ä–∫–æ–≤: {len(self.nft_gifts)}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['interval_seconds']} —Å–µ–∫\n\n"
            f"–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤:\n{gifts_text}"
        )

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        self._save_gifts() 
