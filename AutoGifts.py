__version__ = (1, 0, 0)

# meta developer: @your_username
# description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ

import asyncio
import logging
from .. import loader, utils
from telethon.tl.functions.account import UpdateEmojiStatusRequest
from telethon.tl.types import EmojiStatus

logger = logging.getLogger(__name__)

@loader.tds
class GiftChangerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
    
    strings = {
        "name": "GiftChanger",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ NFT –ø–æ–¥–∞—Ä–∫–∏",
        "loading": "üí´ –ò—â—É NFT –ø–æ–¥–∞—Ä–∫–∏...",
        "debug_info": "üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:\n{}",
    }
    
    strings_ru = {
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ NFT –ø–æ–¥–∞—Ä–∫–∏",
        "loading": "üí´ –ò—â—É NFT –ø–æ–¥–∞—Ä–∫–∏...",
        "debug_info": "üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:\n{}",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval_seconds",
                3600,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=120)
            ),
        )
        self.is_running = False
        self.task = None
        self.current_index = 0
        self.nft_gifts = []
    
    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        me = await self._client.get_me()
        if not me.premium:
            logger.warning("Telegram Premium required for NFT gifts")

    async def _get_available_gifts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã"""
        gifts = []
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ get_stickers
            async for dialog in self._client.iter_dialogs():
                if dialog.is_channel or dialog.is_group:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞
                        async for message in self._client.iter_messages(dialog.id, limit=50):
                            if message.media:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–¥–∏–∞ –ø–æ–¥–∞—Ä–∫–æ–º
                                if hasattr(message.media, 'document'):
                                    doc = message.media.document
                                    if hasattr(doc, 'attributes'):
                                        for attr in doc.attributes:
                                            if hasattr(attr, 'alt') and attr.alt:
                                                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–º–æ–¥–∑–∏
                                                gifts.append({
                                                    'document_id': doc.id,
                                                    'title': attr.alt,
                                                    'type': 'custom_emoji'
                                                })
                    except Exception as e:
                        continue
            
            # –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–∞—Ö
            try:
                featured_stickers = await self._client.get_featured_stickers()
                for sticker_set in featured_stickers.sets:
                    stickers = await self._client.get_stickers(sticker_set.id)
                    for sticker in stickers:
                        if hasattr(sticker, 'id'):
                            gifts.append({
                                'document_id': sticker.id,
                                'title': f"Sticker {sticker.id}",
                                'type': 'sticker'
                            })
            except Exception as e:
                logger.debug(f"Error getting featured stickers: {e}")
                
        except Exception as e:
            logger.error(f"Error getting gifts: {e}")
        
        return gifts

    async def _get_nft_gifts_from_emoji(self):
        """–ü–æ–ª—É—á–∞–µ—Ç NFT –ø–æ–¥–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏"""
        gifts = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
            emoji_packs = []
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —ç–º–æ–¥–∑–∏
            test_packs = [
                "TelegramStars",
                "TelegramNFT", 
                "StarGifts",
                "PremiumGifts"
            ]
            
            for pack_name in test_packs:
                try:
                    stickers = await self._client.get_stickers(pack_name)
                    for sticker in stickers:
                        gifts.append({
                            'document_id': sticker.id,
                            'title': getattr(sticker, 'alt', f'Emoji {sticker.id}'),
                            'type': 'emoji'
                        })
                except Exception:
                    continue
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            try:
                me = await self._client.get_me()
                if hasattr(me, 'emoji_status'):
                    if me.emoji_status and hasattr(me.emoji_status, 'document_id'):
                        gifts.append({
                            'document_id': me.emoji_status.document_id,
                            'title': 'Current Status',
                            'type': 'current_status'
                        })
            except Exception as e:
                logger.debug(f"Error getting current status: {e}")
                
        except Exception as e:
            logger.error(f"Error getting emoji gifts: {e}")
        
        return gifts

    async def _set_emoji_status(self, document_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å"""
        try:
            await self._client(UpdateEmojiStatusRequest(
                emoji_status=EmojiStatus(document_id=document_id)
            ))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ emoji —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    async def _change_gift(self):
        """–°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        try:
            if not self.nft_gifts:
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫
            nft_gift = self.nft_gifts[self.current_index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ emoji —Å—Ç–∞—Ç—É—Å
            success = await self._set_emoji_status(nft_gift['document_id'])
            
            if success:
                logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω: {nft_gift['title']} (ID: {nft_gift['document_id']})")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: {nft_gift['title']}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–∞—Ä–∫—É
            self.current_index = (self.current_index + 1) % len(self.nft_gifts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")

    async def _gift_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        while self.is_running:
            try:
                await self._change_gift()
                await asyncio.sleep(self.config["interval_seconds"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start automatic NFT gift changing",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ"
    )
    async def giftstart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        if self.is_running:
            await utils.answer(message, self.strings("already_running"))
            return
        
        me = await self._client.get_me()
        if not me.premium:
            await utils.answer(message, self.strings("no_premium"))
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤
        await utils.answer(message, self.strings("loading"))
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
        self.nft_gifts = await self._get_nft_gifts_from_emoji()
        
        if not self.nft_gifts:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥
            self.nft_gifts = await self._get_available_gifts()
        
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        self.is_running = True
        self.current_index = 0
        self.task = asyncio.create_task(self._gift_loop())
        
        # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        await self._change_gift()
        
        await utils.answer(message, self.strings("started").format(
            self.config["interval_seconds"], 
            len(self.nft_gifts)
        ))

    @loader.command(
        en_doc="Stop automatic NFT gift changing", 
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.is_running:
            await utils.answer(message, self.strings("already_stopped"))
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Show current gift status",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"
    )
    async def giftstatus(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"""
        status_text = f"üîÑ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        status_text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['interval_seconds']} —Å–µ–∫\n"
        
        if self.nft_gifts:
            status_text += f"üéÅ –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(self.nft_gifts)}\n"
            if self.current_index < len(self.nft_gifts):
                current_gift = self.nft_gifts[self.current_index]
                status_text += f"üìä –¢–µ–∫—É—â–∏–π: {current_gift['title']} ({self.current_index + 1}/{len(self.nft_gifts)})"
        else:
            status_text += "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        
        await utils.answer(message, status_text)

    @loader.command(
        en_doc="Set change interval",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftinterval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        args = utils.get_args(message)
        if not args:
            current_interval = self.config["interval_seconds"]
            await utils.answer(message, f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")
            return
        
        try:
            seconds = int(args[0])
            if seconds < 120:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 —Å–µ–∫—É–Ω–¥")
                return
                
            self.config["interval_seconds"] = seconds
            await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫—É–Ω–¥")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")

    @loader.command(
        en_doc="Reload gifts list",
        ru_doc="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftreload(self, message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        await utils.answer(message, self.strings("loading"))
        
        self.nft_gifts = await self._get_nft_gifts_from_emoji()
        if not self.nft_gifts:
            self.nft_gifts = await self._get_available_gifts()
        
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        await utils.answer(message, f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.nft_gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤")

    @loader.command(
        en_doc="Debug gifts info",
        ru_doc="–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"
    )
    async def giftdebug(self, message):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
        debug_info = f"–í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(self.nft_gifts)}\n"
        debug_info += f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {self.current_index}\n"
        debug_info += f"–ó–∞–ø—É—â–µ–Ω: {self.is_running}\n\n"
        
        for i, gift in enumerate(self.nft_gifts[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            debug_info += f"{i+1}. {gift['title']} (ID: {gift['document_id']}, —Ç–∏–ø: {gift.get('type', 'unknown')})\n"
        
        if len(self.nft_gifts) > 10:
            debug_info += f"... –∏ –µ—â–µ {len(self.nft_gifts) - 10} –ø–æ–¥–∞—Ä–∫–æ–≤"
        
        await utils.answer(message, self.strings("debug_info").format(debug_info))

    @loader.command(
        en_doc="Add gift by ID",
        ru_doc="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID"
    )
    async def addgift(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–∞—Ä–∫–∞\n–ü—Ä–∏–º–µ—Ä: .addgift 123456789")
            return
        
        try:
            doc_id = int(args[0])
            title = args[1] if len(args) > 1 else f"Gift {doc_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫
            for gift in self.nft_gifts:
                if gift['document_id'] == doc_id:
                    await utils.answer(message, f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ —Å ID {doc_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
                    return
            
            self.nft_gifts.append({
                'document_id': doc_id,
                'title': title,
                'type': 'manual'
            })
            
            await utils.answer(message, f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {title} (ID: {doc_id})")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
