__version__ = (2, 0, 0)
# name: AutoGifts
# meta developer: @mofkomodules
# description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ

import asyncio
import logging
from telethon.tl.functions.account import UpdateEmojiStatusRequest
from telethon.tl.types import EmojiStatus
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class AutoGifts(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    
    strings = {
        "name": "GiftChanger",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç NFT –ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π .addgift",
        "gift_added": "‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫",
        "gift_removed": "‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ {} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",
        "gift_not_found": "‚ùå NFT –ø–æ–¥–∞—Ä–æ–∫ {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
        "interval_updated": "‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω: {} —Å–µ–∫—É–Ω–¥",
    }
    
    strings_ru = {
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç NFT –ø–æ–¥–∞—Ä–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π .addgift",
        "gift_added": "‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫",
        "gift_removed": "‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ {} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",
        "gift_not_found": "‚ùå NFT –ø–æ–¥–∞—Ä–æ–∫ {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
        "interval_updated": "‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω: {} —Å–µ–∫—É–Ω–¥",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval_seconds",
                3600,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=120)
            ),
        )
        self.is_running = False
        self.task = None
        self.current_index = 0
        self.gift_ids = []
    
    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.gift_ids = self._db.get(__name__, "gift_ids", [])
        me = await self._client.get_me()
        if not me.premium:
            logger.warning("Telegram Premium required for NFT gifts")
    
    def _save_gifts(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(__name__, "gift_ids", self.gift_ids)
    
    async def _change_gift(self):
        """–°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
        try:
            if not self.gift_ids:
                logger.error("No gifts in list")
                return
                
            me = await self._client.get_me()
            if not me.premium:
                logger.error("No Telegram Premium")
                return
                
            gift_id = self.gift_ids[self.current_index]
            
            await self._client(UpdateEmojiStatusRequest(
                emoji_status=EmojiStatus(document_id=gift_id)
            ))
            
            self.current_index = (self.current_index + 1) % len(self.gift_ids)
            logger.info(f"NFT –ø–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {gift_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ NFT –ø–æ–¥–∞—Ä–∫–∞: {e}")
    
    async def _gift_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–º–µ–Ω—ã NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        while self.is_running:
            try:
                await self._change_gift()
                await asyncio.sleep(self.config["interval_seconds"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–º–µ–Ω—ã NFT –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
                await asyncio.sleep(60)
    
    @loader.command(
        en_doc="Start automatic NFT gift changing",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftstart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if self.is_running:
            await utils.answer(message, self.strings("already_running"))
            return
        
        me = await self._client.get_me()
        if not me.premium:
            await utils.answer(message, self.strings("no_premium"))
            return
        
        if not self.gift_ids:
            await utils.answer(message, self.strings("no_gifts"))
            return
            
        self.is_running = True
        self.task = asyncio.create_task(self._gift_loop())
        await utils.answer(message, self.strings("started").format(self.config["interval_seconds"]))
    
    @loader.command(
        en_doc="Stop automatic NFT gift changing", 
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.is_running:
            await utils.answer(message, self.strings("already_stopped"))
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        await utils.answer(message, self.strings("stopped"))
    
    @loader.command(
        en_doc="Add NFT gift ID",
        ru_doc="–î–æ–±–∞–≤–∏—Ç—å ID NFT –ø–æ–¥–∞—Ä–∫–∞"
    )
    async def addgift(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å ID NFT –ø–æ–¥–∞—Ä–∫–∞"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–∞—Ä–∫–∞")
            return
        
        try:
            gift_id = int(args[0])
            if gift_id not in self.gift_ids:
                self.gift_ids.append(gift_id)
                self._save_gifts()
                await utils.answer(message, self.strings("gift_added").format(gift_id))
            else:
                await utils.answer(message, f"‚ùå NFT –ø–æ–¥–∞—Ä–æ–∫ {gift_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
    
    @loader.command(
        en_doc="Remove NFT gift ID",
        ru_doc="–£–¥–∞–ª–∏—Ç—å ID NFT –ø–æ–¥–∞—Ä–∫–∞"
    )
    async def delgift(self, message):
        """–£–¥–∞–ª–∏—Ç—å ID NFT –ø–æ–¥–∞—Ä–∫–∞"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        try:
            gift_id = int(args[0])
            if gift_id in self.gift_ids:
                self.gift_ids.remove(gift_id)
                self._save_gifts()
                if self.current_index >= len(self.gift_ids) and self.gift_ids:
                    self.current_index = 0
                await utils.answer(message, self.strings("gift_removed").format(gift_id))
            else:
                await utils.answer(message, self.strings("gift_not_found").format(gift_id))
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
    
    @loader.command(
        en_doc="List NFT gifts",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftslist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.gift_ids:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        gifts_text = "\n".join([f"‚Ä¢ {gid}" for gid in self.gift_ids])
        await utils.answer(message, f"üéÅ –°–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ ({len(self.gift_ids)}):\n{gifts_text}")
    
    @loader.command(
        en_doc="Set change interval",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftinterval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        args = utils.get_args(message)
        if not args:
            current_interval = self.config["interval_seconds"]
            await utils.answer(message, f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")
            return
        
        try:
            seconds = int(args[0])
            if seconds < 120:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 —Å–µ–∫—É–Ω–¥")
                return
                
            self.config["interval_seconds"] = seconds
            await utils.answer(message, self.strings("interval_updated").format(seconds))
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")
    
    @loader.command(
        en_doc="Clear all gifts",
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def cleargifts(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.gift_ids:
            await utils.answer(message, "üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –ø—É—Å—Ç")
            return
            
        self.gift_ids.clear()
        self._save_gifts()
        self.current_index = 0
        await utils.answer(message, "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—á–∏—â–µ–Ω")
    
    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass 
