__version__ = (2, 0, 0)

# meta developer: @your_username
# description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ

import asyncio
import logging
from .. import loader, utils
from telethon.tl.functions.account import UpdateEmojiStatusRequest
from telethon.tl.types import EmojiStatus
from telethon.tl.functions.payments import GetSavedStarGiftsRequest
from telethon.tl.types import SavedStarGift, StarGiftUnique, StarGift

logger = logging.getLogger(__name__)

@loader.tds
class AutoGifts(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
    
    strings = {
        "name": "AutoGifts",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ",
        "loading": "üí´ –ò—â—É NFT –ø–æ–¥–∞—Ä–∫–∏ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ...",
        "found_gifts": "‚úÖ –ù–∞–π–¥–µ–Ω–æ {} NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
    }
    
    strings_ru = {
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ",
        "loading": "üí´ –ò—â—É NFT –ø–æ–¥–∞—Ä–∫–∏ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ...",
        "found_gifts": "‚úÖ –ù–∞–π–¥–µ–Ω–æ {} NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval_seconds",
                3600,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=120)
            ),
        )
        self.is_running = False
        self.task = None
        self.current_index = 0
        self.nft_gifts = []
    
    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        me = await self._client.get_me()
        if not me.premium:
            logger.warning("Telegram Premium required for NFT gifts")

    async def _get_saved_star_gifts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏"""
        try:
            result = await self._client(GetSavedStarGiftsRequest(
                peer="me",
                offset="",
                limit=100
            ))
            
            gifts = []
            if hasattr(result, 'gifts') and result.gifts:
                for gift in result.gifts:
                    if isinstance(gift, SavedStarGift):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞
                        if isinstance(gift.gift, StarGiftUnique):
                            # –≠—Ç–æ NFT –ø–æ–¥–∞—Ä–æ–∫
                            if hasattr(gift.gift, 'document_id'):
                                gifts.append({
                                    'document_id': gift.gift.document_id,
                                    'title': getattr(gift.gift, 'title', 'NFT Gift'),
                                    'gift': gift
                                })
                                logger.info(f"Found NFT gift: {gift.gift.title} (ID: {gift.gift.document_id})")
                        
            return gifts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            return []

    async def _set_emoji_status(self, document_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å"""
        try:
            await self._client(UpdateEmojiStatusRequest(
                emoji_status=EmojiStatus(document_id=document_id)
            ))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ emoji —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    async def _change_gift(self):
        """–°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        try:
            if not self.nft_gifts:
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫
            nft_gift = self.nft_gifts[self.current_index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ emoji —Å—Ç–∞—Ç—É—Å
            success = await self._set_emoji_status(nft_gift['document_id'])
            
            if success:
                logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω: {nft_gift['title']} (ID: {nft_gift['document_id']})")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: {nft_gift['title']}")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                self.current_index = (self.current_index + 1) % len(self.nft_gifts)
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–∞—Ä–∫—É
            self.current_index = (self.current_index + 1) % len(self.nft_gifts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")

    async def _gift_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        while self.is_running:
            try:
                await self._change_gift()
                await asyncio.sleep(self.config["interval_seconds"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start automatic NFT gift changing",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ"
    )
    async def giftstart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        if self.is_running:
            await utils.answer(message, self.strings("already_running"))
            return
        
        me = await self._client.get_me()
        if not me.premium:
            await utils.answer(message, self.strings("no_premium"))
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤
        await utils.answer(message, self.strings("loading"))
        self.nft_gifts = await self._get_saved_star_gifts()
        
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        self.is_running = True
        self.current_index = 0
        self.task = asyncio.create_task(self._gift_loop())
        
        # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        await self._change_gift()
        
        await utils.answer(message, self.strings("started").format(
            self.config["interval_seconds"], 
            len(self.nft_gifts)
        ))

    @loader.command(
        en_doc="Stop automatic NFT gift changing", 
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.is_running:
            await utils.answer(message, self.strings("already_stopped"))
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Reload gifts list",
        ru_doc="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftreload(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        await utils.answer(message, self.strings("loading"))
        self.nft_gifts = await self._get_saved_star_gifts()
        
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        await utils.answer(message, self.strings("found_gifts").format(len(self.nft_gifts)))

    @loader.command(
        en_doc="Show current status",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
    )
    async def giftstatus(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        status_text = f"üîÑ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        status_text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['interval_seconds']} —Å–µ–∫\n"
        status_text += f"üéÅ –í—Å–µ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–æ–≤: {len(self.nft_gifts)}\n"
        
        if self.nft_gifts and self.current_index < len(self.nft_gifts):
            current_gift = self.nft_gifts[self.current_index]
            status_text += f"üìä –¢–µ–∫—É—â–∏–π: {current_gift['title']} ({self.current_index + 1}/{len(self.nft_gifts)})"
        
        await utils.answer(message, status_text)

    @loader.command(
        en_doc="List gifts",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftslist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        gifts_text = "\n".join([f"{i+1}. {nft['title']}\n   üÜî {nft['document_id']}" for i, nft in enumerate(self.nft_gifts)])
        await utils.answer(message, f"üéÅ –°–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ ({len(self.nft_gifts)}):\n\n{gifts_text}")

    @loader.command(
        en_doc="Set change interval",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftinterval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        args = utils.get_args(message)
        if not args:
            current_interval = self.config["interval_seconds"]
            await utils.answer(message, f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")
            return
        
        try:
            seconds = int(args[0])
            if seconds < 120:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 —Å–µ–∫—É–Ω–¥")
                return
                
            self.config["interval_seconds"] = seconds
            await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫—É–Ω–¥")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")

    @loader.command(
        en_doc="Test current gift",
        ru_doc="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–¥–∞—Ä–æ–∫"
    )
    async def gifttest(self, message):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–¥–∞—Ä–æ–∫"""
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        current_gift = self.nft_gifts[self.current_index]
        success = await self._set_emoji_status(current_gift['document_id'])
        
        if success:
            await utils.answer(message, f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {current_gift['title']}")
        else:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {current_gift['title']}")

    @loader.command(
        en_doc="Debug gifts info",
        ru_doc="–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"
    )
    async def giftdebug(self, message):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
        try:
            result = await self._client(GetSavedStarGiftsRequest(
                peer="me",
                offset="",
                limit=100
            ))
            
            debug_info = f"–í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ: {getattr(result, 'count', 0)}\n"
            
            if hasattr(result, 'gifts') and result.gifts:
                for i, gift in enumerate(result.gifts[:10]):
                    if isinstance(gift, SavedStarGift):
                        gift_type = "Unknown"
                        doc_id = "N/A"
                        
                        if isinstance(gift.gift, StarGiftUnique):
                            gift_type = "NFT"
                            doc_id = getattr(gift.gift, 'document_id', 'N/A')
                        elif isinstance(gift.gift, StarGift):
                            gift_type = "Regular"
                        
                        debug_info += f"{i+1}. –¢–∏–ø: {gift_type}, ID: {doc_id}\n"
            
            await utils.answer(message, f"üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{debug_info}")
            
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
