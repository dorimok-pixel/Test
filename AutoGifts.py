__version__ = (1, 0, 0)

# meta developer: @your_username
# description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ

import asyncio
import logging
import re
from .. import loader, utils
from telethon.tl.functions.account import UpdateEmojiStatusRequest
from telethon.tl.types import EmojiStatus

logger = logging.getLogger(__name__)

@loader.tds
class AutoGifts(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
    
    strings = {
        "name": "AutoGifts",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤",
        "loading": "üí´ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT...",
        "invalid_link": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ NFT\n–ü—Ä–∏–º–µ—Ä: t.me/nft/SwagBag-22090",
        "nft_added": "‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {}\nID: {}",
        "nft_not_found": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT",
    }
    
    strings_ru = {
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_gifts": "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤",
        "loading": "üí´ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT...",
        "invalid_link": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ NFT\n–ü—Ä–∏–º–µ—Ä: t.me/nft/SwagBag-22090",
        "nft_added": "‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {}\nID: {}",
        "nft_not_found": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval_seconds",
                3600,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=120)
            ),
        )
        self.is_running = False
        self.task = None
        self.current_index = 0
        self.nft_gifts = []
    
    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.nft_gifts = self._db.get(__name__, "nft_gifts", [])
        me = await self._client.get_me()
        if not me.premium:
            logger.warning("Telegram Premium required for NFT gifts")

    def _save_gifts(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(__name__, "nft_gifts", self.nft_gifts)

    async def _get_nft_from_link(self, link: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT –∏–∑ —Å—Å—ã–ª–∫–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ t.me/nft/SwagBag-22090
            pattern = r"t\.me/nft/([A-Za-z0-9_-]+)"
            match = re.search(pattern, link)
            
            if not match:
                logger.error(f"Invalid link format: {link}")
                return None
            
            nft_slug = match.group(1)
            logger.info(f"Searching for NFT: {nft_slug}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª NFT
            try:
                entity = await self._client.get_entity("t.me/nft")
            except Exception as e:
                logger.error(f"Can't access @nft channel: {e}")
                return None
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º NFT
            async for message in self._client.iter_messages(entity, limit=200):
                if not message.text:
                    continue
                    
                # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ NFT –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if nft_slug in message.text:
                    logger.info(f"Found message with NFT: {message.id}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ document_id –≤ –º–µ–¥–∏–∞
                    if message.media:
                        logger.info(f"Message has media: {type(message.media)}")
                        
                        if hasattr(message.media, 'document'):
                            doc_id = message.media.document.id
                            logger.info(f"Found document ID: {doc_id}")
                            return {
                                'document_id': doc_id,
                                'title': nft_slug,
                                'link': link
                            }
                        elif hasattr(message.media, 'webpage'):
                            if hasattr(message.media.webpage, 'document'):
                                doc_id = message.media.webpage.document.id
                                logger.info(f"Found webpage document ID: {doc_id}")
                                return {
                                    'document_id': doc_id,
                                    'title': nft_slug,
                                    'link': link
                                }
            
            logger.warning(f"NFT not found in @nft channel: {nft_slug}")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NFT –∏–∑ —Å—Å—ã–ª–∫–∏: {e}")
            return None

    async def _set_emoji_status(self, document_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å"""
        try:
            await self._client(UpdateEmojiStatusRequest(
                emoji_status=EmojiStatus(document_id=document_id)
            ))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ emoji —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    async def _change_gift(self):
        """–°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        try:
            if not self.nft_gifts:
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫
            nft_gift = self.nft_gifts[self.current_index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ emoji —Å—Ç–∞—Ç—É—Å
            success = await self._set_emoji_status(nft_gift['document_id'])
            
            if success:
                logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω: {nft_gift['title']}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: {nft_gift['title']}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–∞—Ä–∫—É
            self.current_index = (self.current_index + 1) % len(self.nft_gifts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")

    async def _gift_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        while self.is_running:
            try:
                await self._change_gift()
                await asyncio.sleep(self.config["interval_seconds"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start automatic NFT gift changing",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ"
    )
    async def giftstart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        if self.is_running:
            await utils.answer(message, self.strings("already_running"))
            return
        
        me = await self._client.get_me()
        if not me.premium:
            await utils.answer(message, self.strings("no_premium"))
            return
        
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        self.is_running = True
        self.current_index = 0
        self.task = asyncio.create_task(self._gift_loop())
        
        # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        await self._change_gift()
        
        await utils.answer(message, self.strings("started").format(
            self.config["interval_seconds"], 
            len(self.nft_gifts)
        ))

    @loader.command(
        en_doc="Stop automatic NFT gift changing", 
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.is_running:
            await utils.answer(message, self.strings("already_stopped"))
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Add NFT gift by link",
        ru_doc="–î–æ–±–∞–≤–∏—Ç—å NFT –ø–æ–¥–∞—Ä–æ–∫ –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    async def addgift(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å NFT –ø–æ–¥–∞—Ä–æ–∫ –ø–æ —Å—Å—ã–ª–∫–µ"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, 
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ NFT\n"
                "üìù –ü—Ä–∏–º–µ—Ä:\n"
                ".addgift t.me/nft/SwagBag-22090\n\n"
                "üîó –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É:\n"
                "1. –ù–∞–π–¥–∏—Ç–µ NFT –≤ –∫–∞–Ω–∞–ª–µ @nft\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: t.me/nft/–ù–∞–∑–≤–∞–Ω–∏–µ-NUMBER"
            )
            return
        
        link = args[0].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
        if not link.startswith(('t.me/nft/', 'https://t.me/nft/')):
            await utils.answer(message, self.strings("invalid_link"))
            return
        
        await utils.answer(message, self.strings("loading"))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT
        nft_info = await self._get_nft_from_link(link)
        
        if not nft_info:
            await utils.answer(message, self.strings("nft_not_found"))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ NFT
        for existing_nft in self.nft_gifts:
            if existing_nft['link'] == link:
                await utils.answer(message, f"‚ùå NFT —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ: {existing_nft['title']}")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º NFT –≤ —Å–ø–∏—Å–æ–∫
        self.nft_gifts.append(nft_info)
        self._save_gifts()
        
        await utils.answer(message, self.strings("nft_added").format(nft_info['title'], nft_info['document_id']))

    @loader.command(
        en_doc="Remove NFT gift",
        ru_doc="–£–¥–∞–ª–∏—Ç—å NFT –ø–æ–¥–∞—Ä–æ–∫"
    )
    async def delgift(self, message):
        """–£–¥–∞–ª–∏—Ç—å NFT –ø–æ–¥–∞—Ä–æ–∫"""
        args = utils.get_args(message)
        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if not self.nft_gifts:
                await utils.answer(message, self.strings("no_gifts"))
                return
            
            gifts_list = "\n".join([f"{i+1}. {nft['title']} - {nft['link']}" for i, nft in enumerate(self.nft_gifts)])
            await utils.answer(message, f"üéÅ –í—ã–±–µ—Ä–∏—Ç–µ NFT –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{gifts_list}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .delgift <–Ω–æ–º–µ—Ä>")
            return
        
        try:
            index = int(args[0]) - 1
            if 0 <= index < len(self.nft_gifts):
                removed_nft = self.nft_gifts.pop(index)
                self._save_gifts()
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if self.current_index >= len(self.nft_gifts) and self.nft_gifts:
                    self.current_index = 0
                await utils.answer(message, f"‚úÖ NFT —É–¥–∞–ª–µ–Ω: {removed_nft['title']}")
            else:
                await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä NFT")
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä NFT")

    @loader.command(
        en_doc="List gifts",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftslist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_gifts"))
            return
        
        gifts_text = "\n".join([f"{i+1}. {nft['title']}\n   üîó {nft['link']}\n   üÜî {nft['document_id']}" for i, nft in enumerate(self.nft_gifts)])
        await utils.answer(message, f"üéÅ –°–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ ({len(self.nft_gifts)}):\n\n{gifts_text}")

    @loader.command(
        en_doc="Set change interval",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def giftinterval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        args = utils.get_args(message)
        if not args:
            current_interval = self.config["interval_seconds"]
            await utils.answer(message, f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")
            return
        
        try:
            seconds = int(args[0])
            if seconds < 120:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 —Å–µ–∫—É–Ω–¥")
                return
                
            self.config["interval_seconds"] = seconds
            await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫—É–Ω–¥")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")

    @loader.command(
        en_doc="Clear all gifts",
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def cleargifts(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.nft_gifts:
            await utils.answer(message, "üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –ø—É—Å—Ç")
            return
            
        self.nft_gifts.clear()
        self._save_gifts()
        self.current_index = 0
        await utils.answer(message, "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—á–∏—â–µ–Ω")

    @loader.command(
        en_doc="Show current status",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
    )
    async def giftstatus(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        status_text = f"üîÑ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        status_text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['interval_seconds']} —Å–µ–∫\n"
        status_text += f"üéÅ –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(self.nft_gifts)}\n"
        
        if self.nft_gifts and self.current_index < len(self.nft_gifts):
            current_gift = self.nft_gifts[self.current_index]
            status_text += f"üìä –¢–µ–∫—É—â–∏–π: {current_gift['title']} ({self.current_index + 1}/{len(self.nft_gifts)})"
        
        await utils.answer(message, status_text)

    @loader.command(
        en_doc="Add gift by ID manually",
        ru_doc="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID –≤—Ä—É—á–Ω—É—é"
    )
    async def addgiftid(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ ID –≤—Ä—É—á–Ω—É—é"""
        args = utils.get_args(message)
        if len(args) < 2:
            await utils.answer(message, 
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞\n"
                "üìù –ü—Ä–∏–º–µ—Ä:\n"
                ".addgiftid 123456789 \"–ú–æ–π NFT\"\n\n"
                "üîß –ö–∞–∫ –Ω–∞–π—Ç–∏ ID:\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ID –ø–æ–¥–∞—Ä–∫–æ–≤\n"
                "2. –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ –æ—Ç–ª–∞–¥–∫—É"
            )
            return
        
        try:
            doc_id = int(args[0])
            title = args[1]
            link = f"manual_{doc_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ ID
            for existing_nft in self.nft_gifts:
                if existing_nft['document_id'] == doc_id:
                    await utils.answer(message, f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ —Å ID {doc_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
                    return
            
            nft_info = {
                'document_id': doc_id,
                'title': title,
                'link': link
            }
            
            self.nft_gifts.append(nft_info)
            self._save_gifts()
            
            await utils.answer(message, f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {title}\nID: {doc_id}")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
