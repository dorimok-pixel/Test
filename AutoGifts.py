__version__ = (7, 0, 0)

# meta developer: @your_username
# description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏

import asyncio
import logging
import re
from datetime import datetime
from .. import loader, utils
from telethon.tl.functions.account import UpdateEmojiStatusRequest
from telethon.tl.types import EmojiStatus
from telethon.tl.functions.messages import GetStickerSetRequest
from telethon.tl.types import InputStickerSetShortName

logger = logging.getLogger(__name__)

@loader.tds
class AutoGifts(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    
    strings = {
        "name": "AutoGifts",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_collection": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n–ò—Å–ø–æ–ª—å–∑—É–π: .agsetcollection t.me/addemoji/CollectionName",
        "loading": "üí´ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...",
        "collection_updated": "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏",
        "error_loading": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "no_custom_emojis": "‚ùå –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏",
    }
    
    strings_ru = {
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_collection": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n–ò—Å–ø–æ–ª—å–∑—É–π: .agsetcollection t.me/addemoji/CollectionName",
        "loading": "üí´ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...",
        "collection_updated": "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏",
        "error_loading": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "no_custom_emojis": "‚ùå –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval_seconds",
                3600,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=120)
            ),
            loader.ConfigValue(
                "collection_name",
                "",
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏",
                validator=loader.validators.String()
            ),
        )
        self.is_running = False
        self.task = None
        self.current_index = 0
        self.custom_emojis = []
        self.me = None

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.me = await self._client.get_me()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.custom_emojis = self._db.get(__name__, "custom_emojis", [])
        
        if not self.me.premium:
            logger.warning("Telegram Premium required for custom emojis")

    def _save_emojis(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(__name__, "custom_emojis", self.custom_emojis)

    async def _load_custom_emojis(self, collection_name: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ (–∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏)
            sticker_set = await self._client(GetStickerSetRequest(
                stickerset=InputStickerSetShortName(short_name=collection_name),
                hash=0
            ))
            
            custom_emojis = []
            for document in sticker_set.documents:
                if hasattr(document, 'id'):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                    emoji_text = "‚ùì"
                    if hasattr(document, 'attributes'):
                        for attr in document.attributes:
                            if hasattr(attr, 'alt'):
                                emoji_text = attr.alt
                                break
                    
                    custom_emojis.append({
                        'document_id': document.id,
                        'emoji': emoji_text,
                        'title': f"{emoji_text} {collection_name}"
                    })
                    logger.info(f"Found custom emoji: {emoji_text} (ID: {document.id})")

            return custom_emojis, None

        except Exception as e:
            logger.error(f"Error loading custom emojis: {e}")
            return None, str(e)

    async def _set_emoji_status(self, document_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å"""
        try:
            await self._client(UpdateEmojiStatusRequest(
                emoji_status=EmojiStatus(document_id=document_id)
            ))
            return True
        except Exception as e:
            logger.error(f"Error setting emoji status: {e}")
            return False

    async def _change_gift(self):
        """–°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        try:
            if not self.custom_emojis:
                logger.warning("No custom emojis available")
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–º–æ–¥–∑–∏
            emoji_data = self.custom_emojis[self.current_index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ emoji —Å—Ç–∞—Ç—É—Å
            success = await self._set_emoji_status(emoji_data['document_id'])
            
            if success:
                logger.info(f"Emoji changed: {emoji_data['emoji']}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –ª—Å –æ —Å–º–µ–Ω–µ —ç–º–æ–¥–∑–∏
                try:
                    status_msg = (
                        f"üéÅ **–≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω**\n\n"
                        f"{emoji_data['emoji']} {emoji_data['title']}\n"
                        f"üìä {self.current_index + 1}/{len(self.custom_emojis)}\n"
                        f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
                    )
                    await self._client.send_message(self.me.id, status_msg)
                except Exception as e:
                    logger.error(f"Error sending status message: {e}")
            else:
                logger.error(f"Failed to set emoji: {emoji_data['emoji']}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–º–æ–¥–∑–∏
            self.current_index = (self.current_index + 1) % len(self.custom_emojis)
            
        except Exception as e:
            logger.error(f"Error changing emoji: {e}")

    async def _gift_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–º–µ–Ω—ã —ç–º–æ–¥–∑–∏"""
        while self.is_running:
            try:
                await self._change_gift()
                await asyncio.sleep(self.config["interval_seconds"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in emoji loop: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start automatic emoji changing",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É —ç–º–æ–¥–∑–∏"
    )
    async def agstart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É —ç–º–æ–¥–∑–∏"""
        if self.is_running:
            await utils.answer(message, self.strings("already_running"))
            return
        
        if not self.me.premium:
            await utils.answer(message, self.strings("no_premium"))
            return
        
        if not self.config["collection_name"]:
            await utils.answer(message, self.strings("no_collection"))
            return
        
        if not self.custom_emojis:
            await utils.answer(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∫–æ–º–∞–Ω–¥–æ–π .agreload")
            return
        
        self.is_running = True
        self.current_index = 0
        self.task = asyncio.create_task(self._gift_loop())
        
        # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–º–æ–¥–∑–∏
        await self._change_gift()
        
        await utils.answer(message, self.strings("started").format(
            self.config["interval_seconds"], 
            len(self.custom_emojis)
        ))

    @loader.command(
        en_doc="Stop automatic emoji changing", 
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É —ç–º–æ–¥–∑–∏"
    )
    async def agstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É —ç–º–æ–¥–∑–∏"""
        if not self.is_running:
            await utils.answer(message, self.strings("already_stopped"))
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Set collection name",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
    )
    async def agsetcollection(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        args = utils.get_args(message)
        if not args:
            current_name = self.config["collection_name"]
            if current_name:
                await utils.answer(message, f"üìö –¢–µ–∫—É—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {current_name}")
            else:
                await utils.answer(message, self.strings("no_collection"))
            return
        
        collection_name = args[0].strip()
        self.config["collection_name"] = collection_name
        await utils.answer(message, f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {collection_name}")

    @loader.command(
        en_doc="Reload custom emojis",
        ru_doc="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏"
    )
    async def agreload(self, message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏"""
        if not self.config["collection_name"]:
            await utils.answer(message, self.strings("no_collection"))
            return
        
        await utils.answer(message, self.strings("loading"))
        
        custom_emojis, error = await self._load_custom_emojis(self.config["collection_name"])
        
        if error:
            await utils.answer(message, self.strings("error_loading").format(error))
            return
        
        if not custom_emojis:
            await utils.answer(message, self.strings("no_custom_emojis"))
            return
        
        self.custom_emojis = custom_emojis
        self.current_index = 0
        self._save_emojis()
        
        await utils.answer(message, self.strings("collection_updated").format(len(self.custom_emojis)))

    @loader.command(
        en_doc="Set change interval",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã"
    )
    async def aginterval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã"""
        args = utils.get_args(message)
        if not args:
            current_interval = self.config["interval_seconds"]
            await utils.answer(message, f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")
            return
        
        try:
            seconds = int(args[0])
            if seconds < 120:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 —Å–µ–∫—É–Ω–¥")
                return
                
            self.config["interval_seconds"] = seconds
            await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫—É–Ω–¥")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")

    @loader.command(
        en_doc="Show emojis list",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏"
    )
    async def aglist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏"""
        if not self.custom_emojis:
            await utils.answer(message, "‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        
        emojis_text = "\n".join([
            f"{i+1}. {emoji['emoji']} - {emoji['title']}"
            for i, emoji in enumerate(self.custom_emojis)
        ])
        
        await utils.answer(message, 
            f"üéÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {self.config['collection_name']}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"üìä –≠–º–æ–¥–∑–∏: {len(self.custom_emojis)}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['interval_seconds']} —Å–µ–∫\n\n"
            f"–°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏:\n{emojis_text}"
        )

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        self._save_emojis() 
