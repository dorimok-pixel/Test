__version__ = (1, 0, 0)

# meta developer: @your_username
# description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ

import asyncio
import logging
from datetime import datetime
from .. import loader, utils
from telethon.tl.functions.account import UpdateEmojiStatusRequest
from telethon.tl.functions.payments import GetSavedStarGiftsRequest
from telethon.tl.types import EmojiStatus, SavedStarGift, StarGiftUnique

logger = logging.getLogger(__name__)

@loader.tds
class AutoGifts(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç NFT –ø–æ–¥–∞—Ä–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
    
    strings = {
        "name": "AutoGifts",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ NFT: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_nft_gifts": "‚ùå –í –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "loading": "üí´ –ò—â—É NFT –ø–æ–¥–∞—Ä–∫–∏ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏...",
        "gift_changed": "üéÅ NFT –ø–æ–¥–∞—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω: {}",
        "error_changing": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞: {}",
    }
    
    strings_ru = {
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫—É–Ω–¥\nüéÅ –ù–∞–π–¥–µ–Ω–æ NFT: {}",
        "stopped": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
        "already_running": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "already_stopped": "‚ùå –°–º–µ–Ω–∞ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "no_premium": "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "no_nft_gifts": "‚ùå –í –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç NFT –ø–æ–¥–∞—Ä–∫–æ–≤",
        "loading": "üí´ –ò—â—É NFT –ø–æ–¥–∞—Ä–∫–∏ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏...",
        "gift_changed": "üéÅ NFT –ø–æ–¥–∞—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω: {}",
        "error_changing": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞: {}",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "interval_seconds",
                3600,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=120)
            ),
        )
        self.is_running = False
        self.task = None
        self.current_index = 0
        self.nft_gifts = []
        self.me = None

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.me = await self._client.get_me()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.nft_gifts = self._db.get(__name__, "nft_gifts", [])
        
        if not self.me.premium:
            logger.warning("Telegram Premium required for NFT gifts")

    def _save_gifts(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(__name__, "nft_gifts", self.nft_gifts)

    async def _get_saved_star_gifts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            result = await self._client(GetSavedStarGiftsRequest(
                peer=self.me,
                offset="",
                limit=100
            ))
            return result
        except Exception as e:
            logger.error(f"Error getting saved gifts: {e}")
            return None

    async def _load_nft_gifts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç NFT –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            result = await self._get_saved_star_gifts()
            if not result or not hasattr(result, 'gifts'):
                return []

            nft_gifts = []
            for gift in result.gifts:
                if (isinstance(gift, SavedStarGift) and 
                    hasattr(gift, 'gift') and 
                    isinstance(gift.gift, StarGiftUnique) and
                    hasattr(gift.gift, 'document_id')):
                    
                    gift_title = getattr(gift.gift, 'title', f'NFT #{gift.gift.document_id}')
                    nft_gifts.append({
                        'document_id': gift.gift.document_id,
                        'title': gift_title,
                        'gift': gift
                    })
                    logger.info(f"Found NFT gift: {gift_title} (ID: {gift.gift.document_id})")

            return nft_gifts

        except Exception as e:
            logger.error(f"Error loading NFT gifts: {e}")
            return []

    async def _set_emoji_status(self, document_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å"""
        try:
            await self._client(UpdateEmojiStatusRequest(
                emoji_status=EmojiStatus(document_id=document_id)
            ))
            return True
        except Exception as e:
            logger.error(f"Error setting emoji status: {e}")
            return False

    async def _change_gift(self):
        """–°–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ"""
        try:
            if not self.nft_gifts:
                logger.warning("No NFT gifts available")
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫
            nft_gift = self.nft_gifts[self.current_index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ emoji —Å—Ç–∞—Ç—É—Å
            success = await self._set_emoji_status(nft_gift['document_id'])
            
            if success:
                logger.info(f"Gift changed: {nft_gift['title']}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –ª—Å –æ —Å–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞
                try:
                    status_msg = (
                        f"üéÅ **NFT –ø–æ–¥–∞—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
                        f"üíé {nft_gift['title']}\n"
                        f"üÜî ID: {nft_gift['document_id']}\n"
                        f"üìä {self.current_index + 1}/{len(self.nft_gifts)}\n"
                        f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
                    )
                    await self._client.send_message(self.me.id, status_msg)
                except Exception as e:
                    logger.error(f"Error sending status message: {e}")
            else:
                logger.error(f"Failed to set gift: {nft_gift['title']}")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                self.current_index = (self.current_index + 1) % len(self.nft_gifts)
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–∞—Ä–∫—É
            self.current_index = (self.current_index + 1) % len(self.nft_gifts)
            
        except Exception as e:
            logger.error(f"Error changing gift: {e}")

    async def _gift_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–º–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–æ–≤"""
        while self.is_running:
            try:
                await self._change_gift()
                await asyncio.sleep(self.config["interval_seconds"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in gift loop: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start automatic NFT gift changing",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def agstart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if self.is_running:
            await utils.answer(message, self.strings("already_running"))
            return
        
        if not self.me.premium:
            await utils.answer(message, self.strings("no_premium"))
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤
        await utils.answer(message, self.strings("loading"))
        self.nft_gifts = await self._load_nft_gifts()
        
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_nft_gifts"))
            return
        
        self.is_running = True
        self.current_index = 0
        self.task = asyncio.create_task(self._gift_loop())
        self._save_gifts()
        
        # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        await self._change_gift()
        
        await utils.answer(message, self.strings("started").format(
            self.config["interval_seconds"], 
            len(self.nft_gifts)
        ))

    @loader.command(
        en_doc="Stop automatic NFT gift changing", 
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def agstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.is_running:
            await utils.answer(message, self.strings("already_stopped"))
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Reload NFT gifts list",
        ru_doc="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def agreload(self, message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        await utils.answer(message, self.strings("loading"))
        self.nft_gifts = await self._load_nft_gifts()
        
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_nft_gifts"))
            return
        
        self.current_index = 0
        self._save_gifts()
        await utils.answer(message, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.nft_gifts)} NFT –ø–æ–¥–∞—Ä–∫–æ–≤")

    @loader.command(
        en_doc="Show current status",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
    )
    async def agstatus(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        status_text = (
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if self.is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['interval_seconds']} —Å–µ–∫\n"
            f"üéÅ –í—Å–µ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–æ–≤: {len(self.nft_gifts)}\n"
        )
        
        if self.nft_gifts:
            if self.current_index < len(self.nft_gifts):
                current_gift = self.nft_gifts[self.current_index]
                status_text += f"üìä –¢–µ–∫—É—â–∏–π: {current_gift['title']} ({self.current_index + 1}/{len(self.nft_gifts)})"
            else:
                status_text += "üìä –¢–µ–∫—É—â–∏–π: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        await utils.answer(message, status_text)

    @loader.command(
        en_doc="Set change interval",
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã"
    )
    async def aginterval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã"""
        args = utils.get_args(message)
        if not args:
            current_interval = self.config["interval_seconds"]
            await utils.answer(message, f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫—É–Ω–¥")
            return
        
        try:
            seconds = int(args[0])
            if seconds < 120:
                await utils.answer(message, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 —Å–µ–∫—É–Ω–¥")
                return
                
            self.config["interval_seconds"] = seconds
            await utils.answer(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫—É–Ω–¥")
            
        except ValueError:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")

    @loader.command(
        en_doc="Show NFT gifts list",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"
    )
    async def aglist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_nft_gifts"))
            return
        
        gifts_text = "\n".join([
            f"{i+1}. {nft['title']} (ID: {nft['document_id']}){' ‚Üê –¢–ï–ö–£–©–ò–ô' if i == self.current_index else ''}"
            for i, nft in enumerate(self.nft_gifts)
        ])
        await utils.answer(message, f"üéÅ –°–ø–∏—Å–æ–∫ NFT –ø–æ–¥–∞—Ä–∫–æ–≤ ({len(self.nft_gifts)}):\n\n{gifts_text}")

    @loader.command(
        en_doc="Test current NFT gift",
        ru_doc="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π NFT –ø–æ–¥–∞—Ä–æ–∫"
    )
    async def agtest(self, message):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π NFT –ø–æ–¥–∞—Ä–æ–∫"""
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_nft_gifts"))
            return
        
        current_gift = self.nft_gifts[self.current_index]
        success = await self._set_emoji_status(current_gift['document_id'])
        
        if success:
            await utils.answer(message, f"‚úÖ NFT –ø–æ–¥–∞—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {current_gift['title']}")
        else:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {current_gift['title']}")

    @loader.command(
        en_doc="Force change to next NFT gift",
        ru_doc="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π NFT –ø–æ–¥–∞—Ä–æ–∫"
    )
    async def agnext(self, message):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π NFT –ø–æ–¥–∞—Ä–æ–∫"""
        if not self.nft_gifts:
            await utils.answer(message, self.strings("no_nft_gifts"))
            return
        
        await self._change_gift()
        await utils.answer(message, "‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        self._save_gifts()
