__version__ = (2, 0, 0)

# meta developer: @your_username
# description: –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –∏ –∑–≤–µ–∑–¥–∞—Ö

import asyncio
import logging
import time
from datetime import datetime, timedelta
from collections import defaultdict
from .. import loader, utils
from telethon.tl.functions.payments import (
    GetSavedStarGiftsRequest,
    GetResaleStarGiftsRequest,
    GetStarGiftsRequest
)
from telethon.tl.types import (
    SavedStarGift,
    StarGiftUnique,
    StarGift
)

logger = logging.getLogger(__name__)

@loader.tds
class GiftNotifier(loader.Module):
    """–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
    
    strings = {
        "name": "GiftNotifier",
        "started": "‚úÖ GiftNotifier –∑–∞–ø—É—â–µ–Ω\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {}",
        "stopped": "‚úÖ GiftNotifier –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n{}",
        "notification": "üéØ {}\n\n{}",
        "no_tracking": "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "stats": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{}",
        "price_alert": "üí∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {}",
        "new_gift": "üéÅ –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫: {}",
        "collection_update": "üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "giveaway_start": "üéâ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: {}",
    }
    
    strings_ru = {
        "started": "‚úÖ GiftNotifier –∑–∞–ø—É—â–µ–Ω\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {}",
        "stopped": "‚úÖ GiftNotifier –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n{}",
        "notification": "üéØ {}\n\n{}",
        "no_tracking": "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "stats": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{}",
        "price_alert": "üí∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {}",
        "new_gift": "üéÅ –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫: {}",
        "collection_update": "üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {}",
        "giveaway_start": "üéâ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: {}",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "check_interval",
                300,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=60)
            ),
            loader.ConfigValue(
                "track_price_changes",
                True,
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "track_new_gifts",
                True,
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "track_personal_gifts",
                True,
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "min_price_change_percent",
                10,
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (%)",
                validator=loader.validators.Integer(minimum=1, maximum=1000)
            ),
            loader.ConfigValue(
                "notify_channel",
                "",
                "ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞)",
                validator=loader.validators.String()
            )
        )
        
        self.is_running = False
        self.task = None
        self.price_history = {}
        self.gift_cache = set()
        self.personal_gifts_cache = set()
        self.notification_stats = defaultdict(int)
        self.last_stats_reset = datetime.now()

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self._load_cache()

    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.gift_cache = set(self._db.get(__name__, "gift_cache", []))
        self.personal_gifts_cache = set(self._db.get(__name__, "personal_gifts_cache", []))

    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(__name__, "gift_cache", list(self.gift_cache))
        self._db.set(__name__, "personal_gifts_cache", list(self.personal_gifts_cache))

    async def _send_notification(self, title: str, message: str, alert_type: str = "info"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            self.notification_stats[alert_type] += 1
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            notification_text = self.strings("notification").format(title, message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            emoji_map = {
                "price": "üí∏",
                "new": "üéÅ", 
                "personal": "üéØ",
                "info": "‚ÑπÔ∏è"
            }
            
            emoji = emoji_map.get(alert_type, "üîî")
            final_message = f"{emoji} {notification_text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            if self.config["notify_channel"]:
                await self._client.send_message(int(self.config["notify_channel"]), final_message)
            else:
                await utils.answer(message, final_message)
                
            logger.info(f"Notification sent: {title}")
            
        except Exception as e:
            logger.error(f"Error sending notification: {e}")

    async def _check_price_changes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏"""
        if not self.config["track_price_changes"]:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂—É
            resale_gifts = await self._client(GetResaleStarGiftsRequest())
            
            current_prices = {}
            for gift in getattr(resale_gifts, 'gifts', []):
                if hasattr(gift, 'id') and hasattr(gift, 'price'):
                    current_prices[gift.id] = gift.price

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
            for gift_id, current_price in current_prices.items():
                if gift_id in self.price_history:
                    old_price = self.price_history[gift_id]
                    if old_price > 0:
                        change_percent = ((current_price - old_price) / old_price) * 100
                        
                        if abs(change_percent) >= self.config["min_price_change_percent"]:
                            direction = "üìà –≤—ã—Ä–æ—Å" if change_percent > 0 else "üìâ —É–ø–∞–ª"
                            message = (
                                f"–ü–æ–¥–∞—Ä–æ–∫ #{gift_id}\n"
                                f"üí∞ –ë—ã–ª–æ: {old_price} –∑–≤–µ–∑–¥\n"
                                f"üíµ –°—Ç–∞–ª–æ: {current_price} –∑–≤–µ–∑–¥\n"
                                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent:+.1f}%"
                            )
                            await self._send_notification(
                                f"–¶–µ–Ω–∞ {direction}",
                                message,
                                "price"
                            )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                self.price_history[gift_id] = current_price

        except Exception as e:
            logger.error(f"Error checking price changes: {e}")

    async def _check_new_gifts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
        if not self.config["track_new_gifts"]:
            return

        try:
            star_gifts = await self._client(GetStarGiftsRequest())
            
            current_gifts = set()
            for gift in getattr(star_gifts, 'gifts', []):
                if hasattr(gift, 'id'):
                    current_gifts.add(gift.id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫
                    if gift.id not in self.gift_cache:
                        gift_title = getattr(gift, 'title', f'–ü–æ–¥–∞—Ä–æ–∫ #{gift.id}')
                        message = (
                            f"üéÅ {gift_title}\n"
                            f"üíé –¢–∏–ø: {type(gift).__name__}\n"
                            f"‚≠ê –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                        )
                        await self._send_notification(
                            "–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
                            message,
                            "new"
                        )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.gift_cache = current_gifts
            self._save_cache()

        except Exception as e:
            logger.error(f"Error checking new gifts: {e}")

    async def _check_personal_gifts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏"""
        if not self.config["track_personal_gifts"]:
            return

        try:
            saved_gifts = await self._client(GetSavedStarGiftsRequest(peer="me", offset="", limit=100))
            
            current_personal = set()
            for gift in getattr(saved_gifts, 'gifts', []):
                if isinstance(gift, SavedStarGift) and hasattr(gift, 'msg_id'):
                    current_personal.add(gift.msg_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫
                    if gift.msg_id not in self.personal_gifts_cache:
                        gift_type = "NFT" if isinstance(gift.gift, StarGiftUnique) else "–û–±—ã—á–Ω—ã–π"
                        gift_title = getattr(gift.gift, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫')
                        message = (
                            f"üéÅ {gift_title}\n"
                            f"üíé –¢–∏–ø: {gift_type}\n"
                            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é"
                        )
                        await self._send_notification(
                            "–ù–æ–≤—ã–π –ª–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫",
                            message,
                            "personal"
                        )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.personal_gifts_cache = current_personal
            self._save_cache()

        except Exception as e:
            logger.error(f"Error checking personal gifts: {e}")

    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                logger.info("Starting monitoring cycle...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.gather(
                    self._check_price_changes(),
                    self._check_new_gifts(),
                    self._check_personal_gifts(),
                    return_exceptions=True
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                if datetime.now() - self.last_stats_reset > timedelta(days=1):
                    self.notification_stats.clear()
                    self.last_stats_reset = datetime.now()
                
                await asyncio.sleep(self.config["check_interval"])
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start gift notifications",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"
    )
    async def giftnotifystart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
        if self.is_running:
            await utils.answer(message, "‚ùå GiftNotifier —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω
        enabled_trackers = []
        if self.config["track_price_changes"]:
            enabled_trackers.append("üí∞ –¶–µ–Ω—ã")
        if self.config["track_new_gifts"]:
            enabled_trackers.append("üéÅ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏")
        if self.config["track_personal_gifts"]:
            enabled_trackers.append("üéØ –õ–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏")
        
        if not enabled_trackers:
            await utils.answer(message, self.strings("no_tracking"))
            return
        
        self.is_running = True
        self.task = asyncio.create_task(self._monitoring_loop())
        
        trackers_text = "\n".join([f"‚Ä¢ {tracker}" for tracker in enabled_trackers])
        await utils.answer(message, self.strings("started").format(trackers_text))

    @loader.command(
        en_doc="Stop gift notifications",
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"
    )
    async def giftnotifystop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
        if not self.is_running:
            await utils.answer(message, "‚ùå GiftNotifier —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Show notification settings",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    async def giftnotifysettings(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        settings_text = (
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config['check_interval']} —Å–µ–∫\n"
            f"üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã: {'‚úÖ' if self.config['track_price_changes'] else '‚ùå'}\n"
            f"üéÅ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {'‚úÖ' if self.config['track_new_gifts'] else '‚ùå'}\n"
            f"üéØ –õ–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {'‚úÖ' if self.config['track_personal_gifts'] else '‚ùå'}\n"
            f"üìä –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {self.config['min_price_change_percent']}%\n"
            f"üì¢ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.config['notify_channel'] or '–¢–µ–∫—É—â–∏–π —á–∞—Ç'}"
        )
        
        await utils.answer(message, self.strings("settings").format(settings_text))

    @loader.command(
        en_doc="Show notification statistics",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    async def giftnotifystats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.notification_stats:
            await utils.answer(message, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        
        stats_text = "\n".join([
            f"üí∏ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω: {self.notification_stats.get('price', 0)}",
            f"üéÅ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {self.notification_stats.get('new', 0)}",
            f"üéØ –õ–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {self.notification_stats.get('personal', 0)}",
            f"‚ÑπÔ∏è –ü—Ä–æ—á–∏–µ: {self.notification_stats.get('info', 0)}",
            f"üìÖ –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {sum(self.notification_stats.values())}"
        ])
        
        await utils.answer(message, self.strings("stats").format(stats_text))

    @loader.command(
        en_doc="Clear notification cache",
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    async def giftnotifyclear(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.gift_cache.clear()
        self.personal_gifts_cache.clear()
        self.price_history.clear()
        self._save_cache()
        
        await utils.answer(message, "‚úÖ –ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        self._save_cache()
