__version__ = (1, 0, 0)

# meta developer: @your_username
# description: –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –∏ –∑–≤–µ–∑–¥–∞—Ö

import asyncio
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from .. import loader, utils
from telethon.tl.functions.payments import (
    GetSavedStarGiftsRequest,
    GetStarGiftsRequest
)
from telethon.tl.types import (
    SavedStarGift,
    StarGiftUnique,
    StarGift
)

logger = logging.getLogger(__name__)

@loader.tds
class GiftNotifier(loader.Module):
    """–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
    
    strings = {
        "name": "GiftNotifier",
        "started": "‚úÖ GiftNotifier –∑–∞–ø—É—â–µ–Ω\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {}",
        "stopped": "‚úÖ GiftNotifier –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n{}",
        "no_tracking": "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "stats": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{}",
    }
    
    strings_ru = {
        "started": "‚úÖ GiftNotifier –∑–∞–ø—É—â–µ–Ω\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {}",
        "stopped": "‚úÖ GiftNotifier –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n{}",
        "no_tracking": "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "stats": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{}",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "check_interval",
                300,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=60)
            ),
            loader.ConfigValue(
                "track_personal_gifts",
                True,
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "track_new_gifts",
                True,
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "notify_to_me",
                True,
                "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–±–µ –≤ –ª—Å",
                validator=loader.validators.Boolean()
            )
        )
        
        self.is_running = False
        self.task = None
        self.personal_gifts_cache = set()
        self.star_gifts_cache = set()
        self.notification_stats = defaultdict(int)
        self.last_stats_reset = datetime.now()
        self.me = None

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.me = await self._client.get_me()
        self._load_cache()

    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.personal_gifts_cache = set(self._db.get(__name__, "personal_gifts_cache", []))
        self.star_gifts_cache = set(self._db.get(__name__, "star_gifts_cache", []))

    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(__name__, "personal_gifts_cache", list(self.personal_gifts_cache))
        self._db.set(__name__, "star_gifts_cache", list(self.star_gifts_cache))

    async def _send_notification(self, title: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            full_message = f"üéØ **{title}**\n\n{message}"
            
            if self.config["notify_to_me"] and self.me:
                await self._client.send_message(self.me.id, full_message)
            else:
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.info(f"Notification: {title} - {message}")
                
        except Exception as e:
            logger.error(f"Error sending notification: {e}")

    async def _get_saved_star_gifts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏"""
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è GetSavedStarGiftsRequest
            result = await self._client(GetSavedStarGiftsRequest(
                peer=self.me,
                offset="",
                limit=100
            ))
            return result
        except Exception as e:
            logger.error(f"Error getting saved gifts: {e}")
            return None

    async def _get_star_gifts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏"""
        try:
            # –î–ª—è GetStarGiftsRequest –Ω—É–∂–µ–Ω hash, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
            result = await self._client(GetStarGiftsRequest(
                hash=0
            ))
            return result
        except Exception as e:
            logger.error(f"Error getting star gifts: {e}")
            return None

    async def _check_personal_gifts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏"""
        if not self.config["track_personal_gifts"]:
            return

        try:
            result = await self._get_saved_star_gifts()
            if not result or not hasattr(result, 'gifts'):
                return

            current_gifts = set()
            new_gifts = []

            for gift in result.gifts:
                if isinstance(gift, SavedStarGift) and hasattr(gift, 'msg_id'):
                    gift_id = gift.msg_id
                    current_gifts.add(gift_id)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫
                    if gift_id not in self.personal_gifts_cache:
                        gift_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
                        gift_type = "–û–±—ã—á–Ω—ã–π"
                        
                        if hasattr(gift, 'gift'):
                            if isinstance(gift.gift, StarGiftUnique):
                                gift_type = "NFT"
                                if hasattr(gift.gift, 'title'):
                                    gift_title = gift.gift.title
                            elif isinstance(gift.gift, StarGift):
                                gift_type = "–ó–≤–µ–∑–¥–Ω—ã–π"
                                if hasattr(gift.gift, 'title'):
                                    gift_title = gift.gift.title
                        
                        new_gifts.append({
                            'title': gift_title,
                            'type': gift_type,
                            'id': gift_id
                        })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö
            for new_gift in new_gifts:
                message = (
                    f"üéÅ **{new_gift['title']}**\n"
                    f"üíé –¢–∏–ø: {new_gift['type']}\n"
                    f"üÜî ID: {new_gift['id']}\n"
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é"
                )
                await self._send_notification("–ù–æ–≤—ã–π –ª–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", message)
                self.notification_stats["personal"] += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.personal_gifts_cache = current_gifts
            self._save_cache()

        except Exception as e:
            logger.error(f"Error checking personal gifts: {e}")

    async def _check_new_gifts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
        if not self.config["track_new_gifts"]:
            return

        try:
            result = await self._get_star_gifts()
            if not result or not hasattr(result, 'gifts'):
                return

            current_gifts = set()
            new_gifts = []

            for gift in result.gifts:
                if hasattr(gift, 'id'):
                    gift_id = gift.id
                    current_gifts.add(gift_id)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫
                    if gift_id not in self.star_gifts_cache:
                        gift_title = getattr(gift, 'title', f'–ü–æ–¥–∞—Ä–æ–∫ #{gift_id}')
                        gift_type = type(gift).__name__
                        
                        new_gifts.append({
                            'title': gift_title,
                            'type': gift_type,
                            'id': gift_id
                        })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö
            for new_gift in new_gifts:
                message = (
                    f"üéÅ **{new_gift['title']}**\n"
                    f"üíé –¢–∏–ø: {new_gift['type']}\n"
                    f"üÜî ID: {new_gift['id']}\n"
                    f"‚≠ê –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                )
                await self._send_notification("–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ", message)
                self.notification_stats["new"] += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.star_gifts_cache = current_gifts
            self._save_cache()

        except Exception as e:
            logger.error(f"Error checking new gifts: {e}")

    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                logger.info("Starting monitoring cycle...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
                if self.config["track_personal_gifts"]:
                    await self._check_personal_gifts()
                
                if self.config["track_new_gifts"]:
                    await self._check_new_gifts()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                if datetime.now() - self.last_stats_reset > timedelta(days=1):
                    self.notification_stats.clear()
                    self.last_stats_reset = datetime.now()
                
                await asyncio.sleep(self.config["check_interval"])
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                await asyncio.sleep(60)

    @loader.command(
        en_doc="Start gift notifications",
        ru_doc="–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"
    )
    async def giftnotifystart(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
        if self.is_running:
            await utils.answer(message, "‚ùå GiftNotifier —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω
        enabled_trackers = []
        if self.config["track_personal_gifts"]:
            enabled_trackers.append("üéØ –õ–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏")
        if self.config["track_new_gifts"]:
            enabled_trackers.append("üéÅ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏")
        
        if not enabled_trackers:
            await utils.answer(message, self.strings("no_tracking"))
            return
        
        self.is_running = True
        self.task = asyncio.create_task(self._monitoring_loop())
        
        trackers_text = "\n".join([f"‚Ä¢ {tracker}" for tracker in enabled_trackers])
        await utils.answer(message, self.strings("started").format(trackers_text))

    @loader.command(
        en_doc="Stop gift notifications",
        ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"
    )
    async def giftnotifystop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
        if not self.is_running:
            await utils.answer(message, "‚ùå GiftNotifier —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        await utils.answer(message, self.strings("stopped"))

    @loader.command(
        en_doc="Show notification settings",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    async def giftnotifysettings(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        settings_text = (
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config['check_interval']} —Å–µ–∫\n"
            f"üéØ –õ–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {'‚úÖ' if self.config['track_personal_gifts'] else '‚ùå'}\n"
            f"üéÅ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {'‚úÖ' if self.config['track_new_gifts'] else '‚ùå'}\n"
            f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª—Å: {'‚úÖ' if self.config['notify_to_me'] else '‚ùå'}"
        )
        
        await utils.answer(message, self.strings("settings").format(settings_text))

    @loader.command(
        en_doc="Show notification statistics",
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    async def giftnotifystats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.notification_stats:
            await utils.answer(message, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        
        stats_text = "\n".join([
            f"üéØ –õ–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {self.notification_stats.get('personal', 0)}",
            f"üéÅ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {self.notification_stats.get('new', 0)}",
            f"üìÖ –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {sum(self.notification_stats.values())}"
        ])
        
        await utils.answer(message, self.strings("stats").format(stats_text))

    @loader.command(
        en_doc="Clear notification cache",
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    async def giftnotifyclear(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.personal_gifts_cache.clear()
        self.star_gifts_cache.clear()
        self._save_cache()
        
        await utils.answer(message, "‚úÖ –ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")

    @loader.command(
        en_doc="Test notification",
        ru_doc="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    )
    async def giftnotifytest(self, message):
        """–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        test_message = (
            f"üéØ **–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n"
            f"‚úÖ –ú–æ–¥—É–ª—å GiftNotifier —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if self.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        )
        
        if self.config["notify_to_me"] and self.me:
            await self._client.send_message(self.me.id, test_message)
            await utils.answer(message, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª—Å")
        else:
            await utils.answer(message, test_message)

    async def on_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.is_running and self.task:
            self.is_running = False
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        self._save_cache()
